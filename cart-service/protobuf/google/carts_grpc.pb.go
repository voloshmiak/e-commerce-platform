// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: carts.proto

package google

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	protobuf2 "shopping-cart-service/protobuf"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShoppingCartService_GetCart_FullMethodName    = "/cart.ShoppingCartService/GetCart"
	ShoppingCartService_AddItem_FullMethodName    = "/cart.ShoppingCartService/AddItem"
	ShoppingCartService_UpdateItem_FullMethodName = "/cart.ShoppingCartService/UpdateItem"
	ShoppingCartService_RemoveItem_FullMethodName = "/cart.ShoppingCartService/RemoveItem"
	ShoppingCartService_ClearCart_FullMethodName  = "/cart.ShoppingCartService/ClearCart"
)

// ShoppingCartServiceClient is the client API for ShoppingCartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingCartServiceClient interface {
	GetCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf2.GetCartResponse, error)
	AddItem(ctx context.Context, in *protobuf2.AddItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateItem(ctx context.Context, in *protobuf2.UpdateItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveItem(ctx context.Context, in *protobuf2.RemoveItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClearCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shoppingCartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingCartServiceClient(cc grpc.ClientConnInterface) ShoppingCartServiceClient {
	return &shoppingCartServiceClient{cc}
}

func (c *shoppingCartServiceClient) GetCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf2.GetCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(protobuf2.GetCartResponse)
	err := c.cc.Invoke(ctx, ShoppingCartService_GetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartServiceClient) AddItem(ctx context.Context, in *protobuf2.AddItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ShoppingCartService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartServiceClient) UpdateItem(ctx context.Context, in *protobuf2.UpdateItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ShoppingCartService_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartServiceClient) RemoveItem(ctx context.Context, in *protobuf2.RemoveItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ShoppingCartService_RemoveItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartServiceClient) ClearCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ShoppingCartService_ClearCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingCartServiceServer is the server API for ShoppingCartService service.
// All implementations must embed UnimplementedShoppingCartServiceServer
// for forward compatibility.
type ShoppingCartServiceServer interface {
	GetCart(context.Context, *emptypb.Empty) (*protobuf2.GetCartResponse, error)
	AddItem(context.Context, *protobuf2.AddItemRequest) (*emptypb.Empty, error)
	UpdateItem(context.Context, *protobuf2.UpdateItemRequest) (*emptypb.Empty, error)
	RemoveItem(context.Context, *protobuf2.RemoveItemRequest) (*emptypb.Empty, error)
	ClearCart(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedShoppingCartServiceServer()
}

// UnimplementedShoppingCartServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShoppingCartServiceServer struct{}

func (UnimplementedShoppingCartServiceServer) GetCart(context.Context, *emptypb.Empty) (*protobuf2.GetCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedShoppingCartServiceServer) AddItem(context.Context, *protobuf2.AddItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedShoppingCartServiceServer) UpdateItem(context.Context, *protobuf2.UpdateItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedShoppingCartServiceServer) RemoveItem(context.Context, *protobuf2.RemoveItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedShoppingCartServiceServer) ClearCart(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCart not implemented")
}
func (UnimplementedShoppingCartServiceServer) mustEmbedUnimplementedShoppingCartServiceServer() {}
func (UnimplementedShoppingCartServiceServer) testEmbeddedByValue()                             {}

// UnsafeShoppingCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingCartServiceServer will
// result in compilation errors.
type UnsafeShoppingCartServiceServer interface {
	mustEmbedUnimplementedShoppingCartServiceServer()
}

func RegisterShoppingCartServiceServer(s grpc.ServiceRegistrar, srv ShoppingCartServiceServer) {
	// If the following call pancis, it indicates UnimplementedShoppingCartServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShoppingCartService_ServiceDesc, srv)
}

func _ShoppingCartService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCartService_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServiceServer).GetCart(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCartService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf2.AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCartService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServiceServer).AddItem(ctx, req.(*protobuf2.AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCartService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf2.UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCartService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServiceServer).UpdateItem(ctx, req.(*protobuf2.UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCartService_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf2.RemoveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServiceServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCartService_RemoveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServiceServer).RemoveItem(ctx, req.(*protobuf2.RemoveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCartService_ClearCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServiceServer).ClearCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCartService_ClearCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServiceServer).ClearCart(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoppingCartService_ServiceDesc is the grpc.ServiceDesc for ShoppingCartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoppingCartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.ShoppingCartService",
	HandlerType: (*ShoppingCartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCart",
			Handler:    _ShoppingCartService_GetCart_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _ShoppingCartService_AddItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _ShoppingCartService_UpdateItem_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _ShoppingCartService_RemoveItem_Handler,
		},
		{
			MethodName: "ClearCart",
			Handler:    _ShoppingCartService_ClearCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carts.proto",
}
