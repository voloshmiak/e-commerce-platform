services:
  user-service:
    build: ./user-service
    ports:
      - "8081:8080"
    environment:
      - DB_HOST=postgres-user
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=userdb
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres-user
      - kafka
    networks:
      - ecommerce-network
    restart: on-failure

  product-catalog-service:
    build: product-service
    ports:
      - "8082:8080"
    environment:
      - MONGO_URI=mongodb://mongodb:27017/productdb
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - mongodb
      - kafka
    networks:
      - ecommerce-network
    restart: on-failure

  shopping-cart-service:
    build: cart-service
    ports:
      - "8083:8080"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - redis
      - kafka
    networks:
      - ecommerce-network
    restart: on-failure

  order-service:
    build: ./order-service
    ports:
      - "8084:8080"
    environment:
      - DB_HOST=postgres-order
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=orderdb
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres-order
      - kafka
      - product-catalog-service
      - shopping-cart-service
      - user-service
    networks:
      - ecommerce-network
    restart: on-failure

  payment-service:
    build: ./payment-service
    ports:
      - "8085:8080"
    environment:
      - DB_HOST=postgres-payment
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=paymentdb
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres-payment
      - kafka
      - order-service
    networks:
      - ecommerce-network
    restart: on-failure

  notification-service:
    build: ./notification-service
    ports:
      - "8086:8080"
    environment:
      - KAFKA_BROKERS=kafka:9092
      - SMTP_HOST=smtp.example.com
      - SMTP_PORT=587
      - SMTP_USERNAME=notification
      - SMTP_PASSWORD=password
    depends_on:
      - kafka
    networks:
      - ecommerce-network
    restart: on-failure

  postgres-user:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=userdb
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    networks:
      - ecommerce-network

  postgres-order:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=orderdb
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
    networks:
      - ecommerce-network

  postgres-payment:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=paymentdb
    volumes:
      - postgres-payment-data:/var/lib/postgresql/data
    networks:
      - ecommerce-network

  mongodb:
    image: mongo:5
    volumes:
      - mongodb-data:/data/db
    networks:
      - ecommerce-network

  redis:
    image: redis:6
    volumes:
      - redis-data:/data
    networks:
      - ecommerce-network

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - ecommerce-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - ecommerce-network

  kong-gateway:
    image: '${GW_IMAGE:-kong/kong-gateway:3.11.0.2}'
    read_only: true
    restart: unless-stopped
    container_name: kong-gateway
    networks:
      - ecommerce-network
    volumes:
      - ./gateway:/kong/declarative/
      - ./order-service/protobuf:/kong/protos/order
      - ./payment-service/protobuf:/kong/protos/payment
      - ./product-catalog-service/protobuf:/kong/protos/product-catalog
      - ./shopping-cart-service/protobuf:/kong/protos/shopping-cart
      - ./user-service/protobuf:/kong/protos/user
      - ./tmp_volume:/tmp
      - ./prefix_volume:/var/run/kong
    environment:
      KONG_PREFIX: /var/run/kong
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_LICENSE_DATA: "${KONG_LICENSE_DATA}"
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8004:8004"

networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres-user-data:
  postgres-order-data:
  postgres-payment-data:
  mongodb-data:
  redis-data:
  zookeeper-data: